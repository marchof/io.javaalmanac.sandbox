name: CD

on:
  push:
    branches:
      - master
  schedule:
    - cron: '0 0 * * *'

jobs:
  build-mvn:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Upload jar
      uses: actions/upload-artifact@v1
      with:
        name: sandbox.jar
        path: target/sandbox.jar

  build-docker:

    needs: build-mvn
    runs-on: ubuntu-latest

    strategy:
      matrix:
        jdk:
          - version: 11
            image: adoptopenjdk/openjdk11
          - version: 12
            image: adoptopenjdk/openjdk12
          - version: 13
            image: adoptopenjdk/openjdk13
          - version: 14
            image: adoptopenjdk/openjdk14
          - version: 15
            image: adoptopenjdk/openjdk15
          - version: 16
            image: adoptopenjdk/openjdk16
          - version: 17
            image: openjdk:17
          - version: 18
            image: openjdk:18

    steps:
    - uses: actions/checkout@v1
    - name: Download jar
      uses: actions/download-artifact@v1
      with:
        name: sandbox.jar
        path: docker
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: javaalmanac/sandbox
        LATEST_TAG: latest-${{ matrix.jdk.version }}
        JDK_IMAGE: ${{ matrix.jdk.image }}
      run: |
        docker build --build-arg JDK_IMAGE=$JDK_IMAGE -t sandbox docker
        docker tag sandbox $ECR_REGISTRY/$ECR_REPOSITORY:$LATEST_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$LATEST_TAG
    - name: Logout of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}

  update-services:
    needs: build-docker
    runs-on: ubuntu-latest
    steps:
      - name: Update Sandbox Services
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SANDBOX_HOST }}
          username: ${{ secrets.SANDBOX_USERNAME }}
          key: ${{ secrets.SANDBOX_KEY }}
          script: /home/ec2-user/javasandbox/update